// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: stock_movements.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStockMovement = `-- name: CreateStockMovement :one
INSERT INTO stock_movements (product_id, from_location_id, to_location_id, quantity, movement_type) 
VALUES ($1, $2, $3, $4, $5) 
RETURNING id, product_id, from_location_id, to_location_id, quantity, movement_type, created_at
`

type CreateStockMovementParams struct {
	ProductID      int32       `json:"product_id"`
	FromLocationID pgtype.Int4 `json:"from_location_id"`
	ToLocationID   pgtype.Int4 `json:"to_location_id"`
	Quantity       int32       `json:"quantity"`
	MovementType   string      `json:"movement_type"`
}

func (q *Queries) CreateStockMovement(ctx context.Context, arg CreateStockMovementParams) (StockMovement, error) {
	row := q.db.QueryRow(ctx, createStockMovement,
		arg.ProductID,
		arg.FromLocationID,
		arg.ToLocationID,
		arg.Quantity,
		arg.MovementType,
	)
	var i StockMovement
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.FromLocationID,
		&i.ToLocationID,
		&i.Quantity,
		&i.MovementType,
		&i.CreatedAt,
	)
	return i, err
}

const getStockMovementsByLocation = `-- name: GetStockMovementsByLocation :many
SELECT id, product_id, from_location_id, to_location_id, quantity, movement_type, created_at FROM stock_movements WHERE from_location_id = $1 OR to_location_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetStockMovementsByLocation(ctx context.Context, fromLocationID pgtype.Int4) ([]StockMovement, error) {
	rows, err := q.db.Query(ctx, getStockMovementsByLocation, fromLocationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StockMovement
	for rows.Next() {
		var i StockMovement
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.FromLocationID,
			&i.ToLocationID,
			&i.Quantity,
			&i.MovementType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStockMovementsByProduct = `-- name: GetStockMovementsByProduct :many
SELECT id, product_id, from_location_id, to_location_id, quantity, movement_type, created_at FROM stock_movements WHERE product_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetStockMovementsByProduct(ctx context.Context, productID int32) ([]StockMovement, error) {
	rows, err := q.db.Query(ctx, getStockMovementsByProduct, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StockMovement
	for rows.Next() {
		var i StockMovement
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.FromLocationID,
			&i.ToLocationID,
			&i.Quantity,
			&i.MovementType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStockMovements = `-- name: ListStockMovements :many
SELECT id, product_id, from_location_id, to_location_id, quantity, movement_type, created_at FROM stock_movements ORDER BY created_at DESC
`

func (q *Queries) ListStockMovements(ctx context.Context) ([]StockMovement, error) {
	rows, err := q.db.Query(ctx, listStockMovements)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StockMovement
	for rows.Next() {
		var i StockMovement
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.FromLocationID,
			&i.ToLocationID,
			&i.Quantity,
			&i.MovementType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: stock.sql

package db

import (
	"context"
)

const addStock = `-- name: AddStock :one
UPDATE stock 
SET quantity = quantity + $3, updated_at = NOW() 
WHERE product_id = $1 AND location_id = $2 
RETURNING id, product_id, location_id, quantity, created_at, updated_at
`

type AddStockParams struct {
	ProductID  int32 `json:"product_id"`
	LocationID int32 `json:"location_id"`
	Quantity   int32 `json:"quantity"`
}

func (q *Queries) AddStock(ctx context.Context, arg AddStockParams) (Stock, error) {
	row := q.db.QueryRow(ctx, addStock, arg.ProductID, arg.LocationID, arg.Quantity)
	var i Stock
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.LocationID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createStock = `-- name: CreateStock :one
INSERT INTO stock (product_id, location_id, quantity) 
VALUES ($1, $2, $3) 
RETURNING id, product_id, location_id, quantity, created_at, updated_at
`

type CreateStockParams struct {
	ProductID  int32 `json:"product_id"`
	LocationID int32 `json:"location_id"`
	Quantity   int32 `json:"quantity"`
}

func (q *Queries) CreateStock(ctx context.Context, arg CreateStockParams) (Stock, error) {
	row := q.db.QueryRow(ctx, createStock, arg.ProductID, arg.LocationID, arg.Quantity)
	var i Stock
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.LocationID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteStock = `-- name: DeleteStock :exec
DELETE FROM stock WHERE product_id = $1 AND location_id = $2
`

type DeleteStockParams struct {
	ProductID  int32 `json:"product_id"`
	LocationID int32 `json:"location_id"`
}

func (q *Queries) DeleteStock(ctx context.Context, arg DeleteStockParams) error {
	_, err := q.db.Exec(ctx, deleteStock, arg.ProductID, arg.LocationID)
	return err
}

const getLowStock = `-- name: GetLowStock :many
SELECT id, product_id, location_id, quantity, created_at, updated_at FROM stock WHERE quantity < $1
`

func (q *Queries) GetLowStock(ctx context.Context, quantity int32) ([]Stock, error) {
	rows, err := q.db.Query(ctx, getLowStock, quantity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stock
	for rows.Next() {
		var i Stock
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.LocationID,
			&i.Quantity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStockByLocation = `-- name: GetStockByLocation :many
SELECT id, product_id, location_id, quantity, created_at, updated_at FROM stock WHERE location_id = $1
`

func (q *Queries) GetStockByLocation(ctx context.Context, locationID int32) ([]Stock, error) {
	rows, err := q.db.Query(ctx, getStockByLocation, locationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stock
	for rows.Next() {
		var i Stock
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.LocationID,
			&i.Quantity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStockByProduct = `-- name: GetStockByProduct :many
SELECT id, product_id, location_id, quantity, created_at, updated_at FROM stock WHERE product_id = $1
`

func (q *Queries) GetStockByProduct(ctx context.Context, productID int32) ([]Stock, error) {
	rows, err := q.db.Query(ctx, getStockByProduct, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stock
	for rows.Next() {
		var i Stock
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.LocationID,
			&i.Quantity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStockByProductAndLocation = `-- name: GetStockByProductAndLocation :one
SELECT id, product_id, location_id, quantity, created_at, updated_at FROM stock WHERE product_id = $1 AND location_id = $2
`

type GetStockByProductAndLocationParams struct {
	ProductID  int32 `json:"product_id"`
	LocationID int32 `json:"location_id"`
}

func (q *Queries) GetStockByProductAndLocation(ctx context.Context, arg GetStockByProductAndLocationParams) (Stock, error) {
	row := q.db.QueryRow(ctx, getStockByProductAndLocation, arg.ProductID, arg.LocationID)
	var i Stock
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.LocationID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeStock = `-- name: RemoveStock :one
UPDATE stock 
SET quantity = GREATEST(quantity - $3, 0), updated_at = NOW() 
WHERE product_id = $1 AND location_id = $2 
RETURNING id, product_id, location_id, quantity, created_at, updated_at
`

type RemoveStockParams struct {
	ProductID  int32 `json:"product_id"`
	LocationID int32 `json:"location_id"`
	Quantity   int32 `json:"quantity"`
}

func (q *Queries) RemoveStock(ctx context.Context, arg RemoveStockParams) (Stock, error) {
	row := q.db.QueryRow(ctx, removeStock, arg.ProductID, arg.LocationID, arg.Quantity)
	var i Stock
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.LocationID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateStock = `-- name: UpdateStock :one
UPDATE stock 
SET quantity = $3, updated_at = NOW() 
WHERE product_id = $1 AND location_id = $2 
RETURNING id, product_id, location_id, quantity, created_at, updated_at
`

type UpdateStockParams struct {
	ProductID  int32 `json:"product_id"`
	LocationID int32 `json:"location_id"`
	Quantity   int32 `json:"quantity"`
}

func (q *Queries) UpdateStock(ctx context.Context, arg UpdateStockParams) (Stock, error) {
	row := q.db.QueryRow(ctx, updateStock, arg.ProductID, arg.LocationID, arg.Quantity)
	var i Stock
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.LocationID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: locations.sql

package db

import (
	"context"
)

const createLocation = `-- name: CreateLocation :one
INSERT INTO locations (name) 
VALUES ($1) 
RETURNING id, name, created_at
`

func (q *Queries) CreateLocation(ctx context.Context, name string) (Location, error) {
	row := q.db.QueryRow(ctx, createLocation, name)
	var i Location
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deleteLocation = `-- name: DeleteLocation :exec
DELETE FROM locations WHERE id = $1
`

func (q *Queries) DeleteLocation(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteLocation, id)
	return err
}

const getLocationByID = `-- name: GetLocationByID :one
SELECT id, name, created_at FROM locations WHERE id = $1
`

func (q *Queries) GetLocationByID(ctx context.Context, id int32) (Location, error) {
	row := q.db.QueryRow(ctx, getLocationByID, id)
	var i Location
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getLocationByName = `-- name: GetLocationByName :one
SELECT id, name, created_at FROM locations WHERE name = $1
`

func (q *Queries) GetLocationByName(ctx context.Context, name string) (Location, error) {
	row := q.db.QueryRow(ctx, getLocationByName, name)
	var i Location
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const listLocations = `-- name: ListLocations :many
SELECT id, name, created_at FROM locations
`

func (q *Queries) ListLocations(ctx context.Context) ([]Location, error) {
	rows, err := q.db.Query(ctx, listLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLocation = `-- name: UpdateLocation :one
UPDATE locations 
SET name = $2 
WHERE id = $1 
RETURNING id, name, created_at
`

type UpdateLocationParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateLocation(ctx context.Context, arg UpdateLocationParams) (Location, error) {
	row := q.db.QueryRow(ctx, updateLocation, arg.ID, arg.Name)
	var i Location
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

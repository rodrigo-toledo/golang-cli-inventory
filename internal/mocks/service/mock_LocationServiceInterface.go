// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"cli-inventory/internal/models"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockLocationServiceInterface creates a new instance of MockLocationServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLocationServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLocationServiceInterface {
	mock := &MockLocationServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLocationServiceInterface is an autogenerated mock type for the LocationServiceInterface type
type MockLocationServiceInterface struct {
	mock.Mock
}

type MockLocationServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLocationServiceInterface) EXPECT() *MockLocationServiceInterface_Expecter {
	return &MockLocationServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateLocation provides a mock function for the type MockLocationServiceInterface
func (_mock *MockLocationServiceInterface) CreateLocation(ctx context.Context, req *models.CreateLocationRequest) (*models.Location, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateLocation")
	}

	var r0 *models.Location
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.CreateLocationRequest) (*models.Location, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.CreateLocationRequest) *models.Location); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Location)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.CreateLocationRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLocationServiceInterface_CreateLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLocation'
type MockLocationServiceInterface_CreateLocation_Call struct {
	*mock.Call
}

// CreateLocation is a helper method to define mock.On call
//   - ctx context.Context
//   - req *models.CreateLocationRequest
func (_e *MockLocationServiceInterface_Expecter) CreateLocation(ctx interface{}, req interface{}) *MockLocationServiceInterface_CreateLocation_Call {
	return &MockLocationServiceInterface_CreateLocation_Call{Call: _e.mock.On("CreateLocation", ctx, req)}
}

func (_c *MockLocationServiceInterface_CreateLocation_Call) Run(run func(ctx context.Context, req *models.CreateLocationRequest)) *MockLocationServiceInterface_CreateLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.CreateLocationRequest
		if args[1] != nil {
			arg1 = args[1].(*models.CreateLocationRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLocationServiceInterface_CreateLocation_Call) Return(location *models.Location, err error) *MockLocationServiceInterface_CreateLocation_Call {
	_c.Call.Return(location, err)
	return _c
}

func (_c *MockLocationServiceInterface_CreateLocation_Call) RunAndReturn(run func(ctx context.Context, req *models.CreateLocationRequest) (*models.Location, error)) *MockLocationServiceInterface_CreateLocation_Call {
	_c.Call.Return(run)
	return _c
}

// GetLocationByName provides a mock function for the type MockLocationServiceInterface
func (_mock *MockLocationServiceInterface) GetLocationByName(ctx context.Context, name string) (*models.Location, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetLocationByName")
	}

	var r0 *models.Location
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*models.Location, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *models.Location); ok {
		r0 = returnFunc(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Location)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLocationServiceInterface_GetLocationByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocationByName'
type MockLocationServiceInterface_GetLocationByName_Call struct {
	*mock.Call
}

// GetLocationByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockLocationServiceInterface_Expecter) GetLocationByName(ctx interface{}, name interface{}) *MockLocationServiceInterface_GetLocationByName_Call {
	return &MockLocationServiceInterface_GetLocationByName_Call{Call: _e.mock.On("GetLocationByName", ctx, name)}
}

func (_c *MockLocationServiceInterface_GetLocationByName_Call) Run(run func(ctx context.Context, name string)) *MockLocationServiceInterface_GetLocationByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLocationServiceInterface_GetLocationByName_Call) Return(location *models.Location, err error) *MockLocationServiceInterface_GetLocationByName_Call {
	_c.Call.Return(location, err)
	return _c
}

func (_c *MockLocationServiceInterface_GetLocationByName_Call) RunAndReturn(run func(ctx context.Context, name string) (*models.Location, error)) *MockLocationServiceInterface_GetLocationByName_Call {
	_c.Call.Return(run)
	return _c
}

// ListLocations provides a mock function for the type MockLocationServiceInterface
func (_mock *MockLocationServiceInterface) ListLocations(ctx context.Context) ([]models.Location, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListLocations")
	}

	var r0 []models.Location
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]models.Location, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []models.Location); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Location)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLocationServiceInterface_ListLocations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLocations'
type MockLocationServiceInterface_ListLocations_Call struct {
	*mock.Call
}

// ListLocations is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLocationServiceInterface_Expecter) ListLocations(ctx interface{}) *MockLocationServiceInterface_ListLocations_Call {
	return &MockLocationServiceInterface_ListLocations_Call{Call: _e.mock.On("ListLocations", ctx)}
}

func (_c *MockLocationServiceInterface_ListLocations_Call) Run(run func(ctx context.Context)) *MockLocationServiceInterface_ListLocations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLocationServiceInterface_ListLocations_Call) Return(locations []models.Location, err error) *MockLocationServiceInterface_ListLocations_Call {
	_c.Call.Return(locations, err)
	return _c
}

func (_c *MockLocationServiceInterface_ListLocations_Call) RunAndReturn(run func(ctx context.Context) ([]models.Location, error)) *MockLocationServiceInterface_ListLocations_Call {
	_c.Call.Return(run)
	return _c
}

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"cli-inventory/internal/models"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockProductServiceInterface creates a new instance of MockProductServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductServiceInterface {
	mock := &MockProductServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProductServiceInterface is an autogenerated mock type for the ProductServiceInterface type
type MockProductServiceInterface struct {
	mock.Mock
}

type MockProductServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductServiceInterface) EXPECT() *MockProductServiceInterface_Expecter {
	return &MockProductServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateProduct provides a mock function for the type MockProductServiceInterface
func (_mock *MockProductServiceInterface) CreateProduct(ctx context.Context, req *models.CreateProductRequest) (*models.Product, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 *models.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.CreateProductRequest) (*models.Product, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.CreateProductRequest) *models.Product); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.CreateProductRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductServiceInterface_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type MockProductServiceInterface_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - req *models.CreateProductRequest
func (_e *MockProductServiceInterface_Expecter) CreateProduct(ctx interface{}, req interface{}) *MockProductServiceInterface_CreateProduct_Call {
	return &MockProductServiceInterface_CreateProduct_Call{Call: _e.mock.On("CreateProduct", ctx, req)}
}

func (_c *MockProductServiceInterface_CreateProduct_Call) Run(run func(ctx context.Context, req *models.CreateProductRequest)) *MockProductServiceInterface_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.CreateProductRequest
		if args[1] != nil {
			arg1 = args[1].(*models.CreateProductRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProductServiceInterface_CreateProduct_Call) Return(product *models.Product, err error) *MockProductServiceInterface_CreateProduct_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockProductServiceInterface_CreateProduct_Call) RunAndReturn(run func(ctx context.Context, req *models.CreateProductRequest) (*models.Product, error)) *MockProductServiceInterface_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductBySKU provides a mock function for the type MockProductServiceInterface
func (_mock *MockProductServiceInterface) GetProductBySKU(ctx context.Context, sku string) (*models.Product, error) {
	ret := _mock.Called(ctx, sku)

	if len(ret) == 0 {
		panic("no return value specified for GetProductBySKU")
	}

	var r0 *models.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*models.Product, error)); ok {
		return returnFunc(ctx, sku)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *models.Product); ok {
		r0 = returnFunc(ctx, sku)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, sku)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductServiceInterface_GetProductBySKU_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductBySKU'
type MockProductServiceInterface_GetProductBySKU_Call struct {
	*mock.Call
}

// GetProductBySKU is a helper method to define mock.On call
//   - ctx context.Context
//   - sku string
func (_e *MockProductServiceInterface_Expecter) GetProductBySKU(ctx interface{}, sku interface{}) *MockProductServiceInterface_GetProductBySKU_Call {
	return &MockProductServiceInterface_GetProductBySKU_Call{Call: _e.mock.On("GetProductBySKU", ctx, sku)}
}

func (_c *MockProductServiceInterface_GetProductBySKU_Call) Run(run func(ctx context.Context, sku string)) *MockProductServiceInterface_GetProductBySKU_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProductServiceInterface_GetProductBySKU_Call) Return(product *models.Product, err error) *MockProductServiceInterface_GetProductBySKU_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockProductServiceInterface_GetProductBySKU_Call) RunAndReturn(run func(ctx context.Context, sku string) (*models.Product, error)) *MockProductServiceInterface_GetProductBySKU_Call {
	_c.Call.Return(run)
	return _c
}

// ListProducts provides a mock function for the type MockProductServiceInterface
func (_mock *MockProductServiceInterface) ListProducts(ctx context.Context) ([]models.Product, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListProducts")
	}

	var r0 []models.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]models.Product, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []models.Product); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductServiceInterface_ListProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProducts'
type MockProductServiceInterface_ListProducts_Call struct {
	*mock.Call
}

// ListProducts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProductServiceInterface_Expecter) ListProducts(ctx interface{}) *MockProductServiceInterface_ListProducts_Call {
	return &MockProductServiceInterface_ListProducts_Call{Call: _e.mock.On("ListProducts", ctx)}
}

func (_c *MockProductServiceInterface_ListProducts_Call) Run(run func(ctx context.Context)) *MockProductServiceInterface_ListProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProductServiceInterface_ListProducts_Call) Return(products []models.Product, err error) *MockProductServiceInterface_ListProducts_Call {
	_c.Call.Return(products, err)
	return _c
}

func (_c *MockProductServiceInterface_ListProducts_Call) RunAndReturn(run func(ctx context.Context) ([]models.Product, error)) *MockProductServiceInterface_ListProducts_Call {
	_c.Call.Return(run)
	return _c
}

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"cli-inventory/internal/models"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockProductRepositoryInterface creates a new instance of MockProductRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductRepositoryInterface {
	mock := &MockProductRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProductRepositoryInterface is an autogenerated mock type for the ProductRepositoryInterface type
type MockProductRepositoryInterface struct {
	mock.Mock
}

type MockProductRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductRepositoryInterface) EXPECT() *MockProductRepositoryInterface_Expecter {
	return &MockProductRepositoryInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockProductRepositoryInterface
func (_mock *MockProductRepositoryInterface) Create(ctx context.Context, product *models.CreateProductRequest) (*models.Product, error) {
	ret := _mock.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.CreateProductRequest) (*models.Product, error)); ok {
		return returnFunc(ctx, product)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.CreateProductRequest) *models.Product); ok {
		r0 = returnFunc(ctx, product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.CreateProductRequest) error); ok {
		r1 = returnFunc(ctx, product)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductRepositoryInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProductRepositoryInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - product *models.CreateProductRequest
func (_e *MockProductRepositoryInterface_Expecter) Create(ctx interface{}, product interface{}) *MockProductRepositoryInterface_Create_Call {
	return &MockProductRepositoryInterface_Create_Call{Call: _e.mock.On("Create", ctx, product)}
}

func (_c *MockProductRepositoryInterface_Create_Call) Run(run func(ctx context.Context, product *models.CreateProductRequest)) *MockProductRepositoryInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.CreateProductRequest
		if args[1] != nil {
			arg1 = args[1].(*models.CreateProductRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProductRepositoryInterface_Create_Call) Return(product1 *models.Product, err error) *MockProductRepositoryInterface_Create_Call {
	_c.Call.Return(product1, err)
	return _c
}

func (_c *MockProductRepositoryInterface_Create_Call) RunAndReturn(run func(ctx context.Context, product *models.CreateProductRequest) (*models.Product, error)) *MockProductRepositoryInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockProductRepositoryInterface
func (_mock *MockProductRepositoryInterface) GetByID(ctx context.Context, id int) (*models.Product, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (*models.Product, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) *models.Product); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductRepositoryInterface_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockProductRepositoryInterface_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockProductRepositoryInterface_Expecter) GetByID(ctx interface{}, id interface{}) *MockProductRepositoryInterface_GetByID_Call {
	return &MockProductRepositoryInterface_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockProductRepositoryInterface_GetByID_Call) Run(run func(ctx context.Context, id int)) *MockProductRepositoryInterface_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProductRepositoryInterface_GetByID_Call) Return(product *models.Product, err error) *MockProductRepositoryInterface_GetByID_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockProductRepositoryInterface_GetByID_Call) RunAndReturn(run func(ctx context.Context, id int) (*models.Product, error)) *MockProductRepositoryInterface_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetBySKU provides a mock function for the type MockProductRepositoryInterface
func (_mock *MockProductRepositoryInterface) GetBySKU(ctx context.Context, sku string) (*models.Product, error) {
	ret := _mock.Called(ctx, sku)

	if len(ret) == 0 {
		panic("no return value specified for GetBySKU")
	}

	var r0 *models.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*models.Product, error)); ok {
		return returnFunc(ctx, sku)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *models.Product); ok {
		r0 = returnFunc(ctx, sku)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, sku)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductRepositoryInterface_GetBySKU_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBySKU'
type MockProductRepositoryInterface_GetBySKU_Call struct {
	*mock.Call
}

// GetBySKU is a helper method to define mock.On call
//   - ctx context.Context
//   - sku string
func (_e *MockProductRepositoryInterface_Expecter) GetBySKU(ctx interface{}, sku interface{}) *MockProductRepositoryInterface_GetBySKU_Call {
	return &MockProductRepositoryInterface_GetBySKU_Call{Call: _e.mock.On("GetBySKU", ctx, sku)}
}

func (_c *MockProductRepositoryInterface_GetBySKU_Call) Run(run func(ctx context.Context, sku string)) *MockProductRepositoryInterface_GetBySKU_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProductRepositoryInterface_GetBySKU_Call) Return(product *models.Product, err error) *MockProductRepositoryInterface_GetBySKU_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockProductRepositoryInterface_GetBySKU_Call) RunAndReturn(run func(ctx context.Context, sku string) (*models.Product, error)) *MockProductRepositoryInterface_GetBySKU_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockProductRepositoryInterface
func (_mock *MockProductRepositoryInterface) List(ctx context.Context) ([]models.Product, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]models.Product, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []models.Product); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductRepositoryInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockProductRepositoryInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProductRepositoryInterface_Expecter) List(ctx interface{}) *MockProductRepositoryInterface_List_Call {
	return &MockProductRepositoryInterface_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockProductRepositoryInterface_List_Call) Run(run func(ctx context.Context)) *MockProductRepositoryInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProductRepositoryInterface_List_Call) Return(products []models.Product, err error) *MockProductRepositoryInterface_List_Call {
	_c.Call.Return(products, err)
	return _c
}

func (_c *MockProductRepositoryInterface_List_Call) RunAndReturn(run func(ctx context.Context) ([]models.Product, error)) *MockProductRepositoryInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"cli-inventory/internal/models"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockStockRepositoryInterface creates a new instance of MockStockRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStockRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStockRepositoryInterface {
	mock := &MockStockRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStockRepositoryInterface is an autogenerated mock type for the StockRepositoryInterface type
type MockStockRepositoryInterface struct {
	mock.Mock
}

type MockStockRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStockRepositoryInterface) EXPECT() *MockStockRepositoryInterface_Expecter {
	return &MockStockRepositoryInterface_Expecter{mock: &_m.Mock}
}

// AddStock provides a mock function for the type MockStockRepositoryInterface
func (_mock *MockStockRepositoryInterface) AddStock(ctx context.Context, productID int, locationID int, quantity int) (*models.Stock, error) {
	ret := _mock.Called(ctx, productID, locationID, quantity)

	if len(ret) == 0 {
		panic("no return value specified for AddStock")
	}

	var r0 *models.Stock
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, int) (*models.Stock, error)); ok {
		return returnFunc(ctx, productID, locationID, quantity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, int) *models.Stock); ok {
		r0 = returnFunc(ctx, productID, locationID, quantity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Stock)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int, int) error); ok {
		r1 = returnFunc(ctx, productID, locationID, quantity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStockRepositoryInterface_AddStock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddStock'
type MockStockRepositoryInterface_AddStock_Call struct {
	*mock.Call
}

// AddStock is a helper method to define mock.On call
//   - ctx context.Context
//   - productID int
//   - locationID int
//   - quantity int
func (_e *MockStockRepositoryInterface_Expecter) AddStock(ctx interface{}, productID interface{}, locationID interface{}, quantity interface{}) *MockStockRepositoryInterface_AddStock_Call {
	return &MockStockRepositoryInterface_AddStock_Call{Call: _e.mock.On("AddStock", ctx, productID, locationID, quantity)}
}

func (_c *MockStockRepositoryInterface_AddStock_Call) Run(run func(ctx context.Context, productID int, locationID int, quantity int)) *MockStockRepositoryInterface_AddStock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockStockRepositoryInterface_AddStock_Call) Return(stock *models.Stock, err error) *MockStockRepositoryInterface_AddStock_Call {
	_c.Call.Return(stock, err)
	return _c
}

func (_c *MockStockRepositoryInterface_AddStock_Call) RunAndReturn(run func(ctx context.Context, productID int, locationID int, quantity int) (*models.Stock, error)) *MockStockRepositoryInterface_AddStock_Call {
	_c.Call.Return(run)
	return _c
}

// GetByProductAndLocation provides a mock function for the type MockStockRepositoryInterface
func (_mock *MockStockRepositoryInterface) GetByProductAndLocation(ctx context.Context, productID int, locationID int) (*models.Stock, error) {
	ret := _mock.Called(ctx, productID, locationID)

	if len(ret) == 0 {
		panic("no return value specified for GetByProductAndLocation")
	}

	var r0 *models.Stock
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) (*models.Stock, error)); ok {
		return returnFunc(ctx, productID, locationID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) *models.Stock); ok {
		r0 = returnFunc(ctx, productID, locationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Stock)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = returnFunc(ctx, productID, locationID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStockRepositoryInterface_GetByProductAndLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByProductAndLocation'
type MockStockRepositoryInterface_GetByProductAndLocation_Call struct {
	*mock.Call
}

// GetByProductAndLocation is a helper method to define mock.On call
//   - ctx context.Context
//   - productID int
//   - locationID int
func (_e *MockStockRepositoryInterface_Expecter) GetByProductAndLocation(ctx interface{}, productID interface{}, locationID interface{}) *MockStockRepositoryInterface_GetByProductAndLocation_Call {
	return &MockStockRepositoryInterface_GetByProductAndLocation_Call{Call: _e.mock.On("GetByProductAndLocation", ctx, productID, locationID)}
}

func (_c *MockStockRepositoryInterface_GetByProductAndLocation_Call) Run(run func(ctx context.Context, productID int, locationID int)) *MockStockRepositoryInterface_GetByProductAndLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStockRepositoryInterface_GetByProductAndLocation_Call) Return(stock *models.Stock, err error) *MockStockRepositoryInterface_GetByProductAndLocation_Call {
	_c.Call.Return(stock, err)
	return _c
}

func (_c *MockStockRepositoryInterface_GetByProductAndLocation_Call) RunAndReturn(run func(ctx context.Context, productID int, locationID int) (*models.Stock, error)) *MockStockRepositoryInterface_GetByProductAndLocation_Call {
	_c.Call.Return(run)
	return _c
}

// GetLowStock provides a mock function for the type MockStockRepositoryInterface
func (_mock *MockStockRepositoryInterface) GetLowStock(ctx context.Context, threshold int) ([]models.Stock, error) {
	ret := _mock.Called(ctx, threshold)

	if len(ret) == 0 {
		panic("no return value specified for GetLowStock")
	}

	var r0 []models.Stock
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) ([]models.Stock, error)); ok {
		return returnFunc(ctx, threshold)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) []models.Stock); ok {
		r0 = returnFunc(ctx, threshold)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Stock)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, threshold)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStockRepositoryInterface_GetLowStock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLowStock'
type MockStockRepositoryInterface_GetLowStock_Call struct {
	*mock.Call
}

// GetLowStock is a helper method to define mock.On call
//   - ctx context.Context
//   - threshold int
func (_e *MockStockRepositoryInterface_Expecter) GetLowStock(ctx interface{}, threshold interface{}) *MockStockRepositoryInterface_GetLowStock_Call {
	return &MockStockRepositoryInterface_GetLowStock_Call{Call: _e.mock.On("GetLowStock", ctx, threshold)}
}

func (_c *MockStockRepositoryInterface_GetLowStock_Call) Run(run func(ctx context.Context, threshold int)) *MockStockRepositoryInterface_GetLowStock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStockRepositoryInterface_GetLowStock_Call) Return(stocks []models.Stock, err error) *MockStockRepositoryInterface_GetLowStock_Call {
	_c.Call.Return(stocks, err)
	return _c
}

func (_c *MockStockRepositoryInterface_GetLowStock_Call) RunAndReturn(run func(ctx context.Context, threshold int) ([]models.Stock, error)) *MockStockRepositoryInterface_GetLowStock_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveStock provides a mock function for the type MockStockRepositoryInterface
func (_mock *MockStockRepositoryInterface) RemoveStock(ctx context.Context, productID int, locationID int, quantity int) (*models.Stock, error) {
	ret := _mock.Called(ctx, productID, locationID, quantity)

	if len(ret) == 0 {
		panic("no return value specified for RemoveStock")
	}

	var r0 *models.Stock
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, int) (*models.Stock, error)); ok {
		return returnFunc(ctx, productID, locationID, quantity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, int) *models.Stock); ok {
		r0 = returnFunc(ctx, productID, locationID, quantity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Stock)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int, int) error); ok {
		r1 = returnFunc(ctx, productID, locationID, quantity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStockRepositoryInterface_RemoveStock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveStock'
type MockStockRepositoryInterface_RemoveStock_Call struct {
	*mock.Call
}

// RemoveStock is a helper method to define mock.On call
//   - ctx context.Context
//   - productID int
//   - locationID int
//   - quantity int
func (_e *MockStockRepositoryInterface_Expecter) RemoveStock(ctx interface{}, productID interface{}, locationID interface{}, quantity interface{}) *MockStockRepositoryInterface_RemoveStock_Call {
	return &MockStockRepositoryInterface_RemoveStock_Call{Call: _e.mock.On("RemoveStock", ctx, productID, locationID, quantity)}
}

func (_c *MockStockRepositoryInterface_RemoveStock_Call) Run(run func(ctx context.Context, productID int, locationID int, quantity int)) *MockStockRepositoryInterface_RemoveStock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockStockRepositoryInterface_RemoveStock_Call) Return(stock *models.Stock, err error) *MockStockRepositoryInterface_RemoveStock_Call {
	_c.Call.Return(stock, err)
	return _c
}

func (_c *MockStockRepositoryInterface_RemoveStock_Call) RunAndReturn(run func(ctx context.Context, productID int, locationID int, quantity int) (*models.Stock, error)) *MockStockRepositoryInterface_RemoveStock_Call {
	_c.Call.Return(run)
	return _c
}

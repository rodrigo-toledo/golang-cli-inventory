// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"cli-inventory/internal/models"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockStockServiceInterface creates a new instance of MockStockServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStockServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStockServiceInterface {
	mock := &MockStockServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStockServiceInterface is an autogenerated mock type for the StockServiceInterface type
type MockStockServiceInterface struct {
	mock.Mock
}

type MockStockServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStockServiceInterface) EXPECT() *MockStockServiceInterface_Expecter {
	return &MockStockServiceInterface_Expecter{mock: &_m.Mock}
}

// AddStock provides a mock function for the type MockStockServiceInterface
func (_mock *MockStockServiceInterface) AddStock(ctx context.Context, req *models.AddStockRequest) (*models.Stock, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AddStock")
	}

	var r0 *models.Stock
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.AddStockRequest) (*models.Stock, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.AddStockRequest) *models.Stock); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Stock)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.AddStockRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStockServiceInterface_AddStock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddStock'
type MockStockServiceInterface_AddStock_Call struct {
	*mock.Call
}

// AddStock is a helper method to define mock.On call
//   - ctx context.Context
//   - req *models.AddStockRequest
func (_e *MockStockServiceInterface_Expecter) AddStock(ctx interface{}, req interface{}) *MockStockServiceInterface_AddStock_Call {
	return &MockStockServiceInterface_AddStock_Call{Call: _e.mock.On("AddStock", ctx, req)}
}

func (_c *MockStockServiceInterface_AddStock_Call) Run(run func(ctx context.Context, req *models.AddStockRequest)) *MockStockServiceInterface_AddStock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.AddStockRequest
		if args[1] != nil {
			arg1 = args[1].(*models.AddStockRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStockServiceInterface_AddStock_Call) Return(stock *models.Stock, err error) *MockStockServiceInterface_AddStock_Call {
	_c.Call.Return(stock, err)
	return _c
}

func (_c *MockStockServiceInterface_AddStock_Call) RunAndReturn(run func(ctx context.Context, req *models.AddStockRequest) (*models.Stock, error)) *MockStockServiceInterface_AddStock_Call {
	_c.Call.Return(run)
	return _c
}

// GetLowStockReport provides a mock function for the type MockStockServiceInterface
func (_mock *MockStockServiceInterface) GetLowStockReport(ctx context.Context, threshold int) ([]models.Stock, error) {
	ret := _mock.Called(ctx, threshold)

	if len(ret) == 0 {
		panic("no return value specified for GetLowStockReport")
	}

	var r0 []models.Stock
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) ([]models.Stock, error)); ok {
		return returnFunc(ctx, threshold)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) []models.Stock); ok {
		r0 = returnFunc(ctx, threshold)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Stock)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, threshold)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStockServiceInterface_GetLowStockReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLowStockReport'
type MockStockServiceInterface_GetLowStockReport_Call struct {
	*mock.Call
}

// GetLowStockReport is a helper method to define mock.On call
//   - ctx context.Context
//   - threshold int
func (_e *MockStockServiceInterface_Expecter) GetLowStockReport(ctx interface{}, threshold interface{}) *MockStockServiceInterface_GetLowStockReport_Call {
	return &MockStockServiceInterface_GetLowStockReport_Call{Call: _e.mock.On("GetLowStockReport", ctx, threshold)}
}

func (_c *MockStockServiceInterface_GetLowStockReport_Call) Run(run func(ctx context.Context, threshold int)) *MockStockServiceInterface_GetLowStockReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStockServiceInterface_GetLowStockReport_Call) Return(stocks []models.Stock, err error) *MockStockServiceInterface_GetLowStockReport_Call {
	_c.Call.Return(stocks, err)
	return _c
}

func (_c *MockStockServiceInterface_GetLowStockReport_Call) RunAndReturn(run func(ctx context.Context, threshold int) ([]models.Stock, error)) *MockStockServiceInterface_GetLowStockReport_Call {
	_c.Call.Return(run)
	return _c
}

// MoveStock provides a mock function for the type MockStockServiceInterface
func (_mock *MockStockServiceInterface) MoveStock(ctx context.Context, req *models.MoveStockRequest) (*models.Stock, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for MoveStock")
	}

	var r0 *models.Stock
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.MoveStockRequest) (*models.Stock, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.MoveStockRequest) *models.Stock); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Stock)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.MoveStockRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStockServiceInterface_MoveStock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MoveStock'
type MockStockServiceInterface_MoveStock_Call struct {
	*mock.Call
}

// MoveStock is a helper method to define mock.On call
//   - ctx context.Context
//   - req *models.MoveStockRequest
func (_e *MockStockServiceInterface_Expecter) MoveStock(ctx interface{}, req interface{}) *MockStockServiceInterface_MoveStock_Call {
	return &MockStockServiceInterface_MoveStock_Call{Call: _e.mock.On("MoveStock", ctx, req)}
}

func (_c *MockStockServiceInterface_MoveStock_Call) Run(run func(ctx context.Context, req *models.MoveStockRequest)) *MockStockServiceInterface_MoveStock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.MoveStockRequest
		if args[1] != nil {
			arg1 = args[1].(*models.MoveStockRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStockServiceInterface_MoveStock_Call) Return(stock *models.Stock, err error) *MockStockServiceInterface_MoveStock_Call {
	_c.Call.Return(stock, err)
	return _c
}

func (_c *MockStockServiceInterface_MoveStock_Call) RunAndReturn(run func(ctx context.Context, req *models.MoveStockRequest) (*models.Stock, error)) *MockStockServiceInterface_MoveStock_Call {
	_c.Call.Return(run)
	return _c
}

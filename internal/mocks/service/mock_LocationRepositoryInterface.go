// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"cli-inventory/internal/models"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockLocationRepositoryInterface creates a new instance of MockLocationRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLocationRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLocationRepositoryInterface {
	mock := &MockLocationRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLocationRepositoryInterface is an autogenerated mock type for the LocationRepositoryInterface type
type MockLocationRepositoryInterface struct {
	mock.Mock
}

type MockLocationRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLocationRepositoryInterface) EXPECT() *MockLocationRepositoryInterface_Expecter {
	return &MockLocationRepositoryInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockLocationRepositoryInterface
func (_mock *MockLocationRepositoryInterface) Create(ctx context.Context, location *models.CreateLocationRequest) (*models.Location, error) {
	ret := _mock.Called(ctx, location)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.Location
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.CreateLocationRequest) (*models.Location, error)); ok {
		return returnFunc(ctx, location)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.CreateLocationRequest) *models.Location); ok {
		r0 = returnFunc(ctx, location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Location)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *models.CreateLocationRequest) error); ok {
		r1 = returnFunc(ctx, location)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLocationRepositoryInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockLocationRepositoryInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - location *models.CreateLocationRequest
func (_e *MockLocationRepositoryInterface_Expecter) Create(ctx interface{}, location interface{}) *MockLocationRepositoryInterface_Create_Call {
	return &MockLocationRepositoryInterface_Create_Call{Call: _e.mock.On("Create", ctx, location)}
}

func (_c *MockLocationRepositoryInterface_Create_Call) Run(run func(ctx context.Context, location *models.CreateLocationRequest)) *MockLocationRepositoryInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.CreateLocationRequest
		if args[1] != nil {
			arg1 = args[1].(*models.CreateLocationRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLocationRepositoryInterface_Create_Call) Return(location1 *models.Location, err error) *MockLocationRepositoryInterface_Create_Call {
	_c.Call.Return(location1, err)
	return _c
}

func (_c *MockLocationRepositoryInterface_Create_Call) RunAndReturn(run func(ctx context.Context, location *models.CreateLocationRequest) (*models.Location, error)) *MockLocationRepositoryInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockLocationRepositoryInterface
func (_mock *MockLocationRepositoryInterface) GetByID(ctx context.Context, id int) (*models.Location, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Location
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (*models.Location, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) *models.Location); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Location)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLocationRepositoryInterface_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockLocationRepositoryInterface_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockLocationRepositoryInterface_Expecter) GetByID(ctx interface{}, id interface{}) *MockLocationRepositoryInterface_GetByID_Call {
	return &MockLocationRepositoryInterface_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockLocationRepositoryInterface_GetByID_Call) Run(run func(ctx context.Context, id int)) *MockLocationRepositoryInterface_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLocationRepositoryInterface_GetByID_Call) Return(location *models.Location, err error) *MockLocationRepositoryInterface_GetByID_Call {
	_c.Call.Return(location, err)
	return _c
}

func (_c *MockLocationRepositoryInterface_GetByID_Call) RunAndReturn(run func(ctx context.Context, id int) (*models.Location, error)) *MockLocationRepositoryInterface_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function for the type MockLocationRepositoryInterface
func (_mock *MockLocationRepositoryInterface) GetByName(ctx context.Context, name string) (*models.Location, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *models.Location
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*models.Location, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *models.Location); ok {
		r0 = returnFunc(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Location)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLocationRepositoryInterface_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockLocationRepositoryInterface_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockLocationRepositoryInterface_Expecter) GetByName(ctx interface{}, name interface{}) *MockLocationRepositoryInterface_GetByName_Call {
	return &MockLocationRepositoryInterface_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *MockLocationRepositoryInterface_GetByName_Call) Run(run func(ctx context.Context, name string)) *MockLocationRepositoryInterface_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLocationRepositoryInterface_GetByName_Call) Return(location *models.Location, err error) *MockLocationRepositoryInterface_GetByName_Call {
	_c.Call.Return(location, err)
	return _c
}

func (_c *MockLocationRepositoryInterface_GetByName_Call) RunAndReturn(run func(ctx context.Context, name string) (*models.Location, error)) *MockLocationRepositoryInterface_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockLocationRepositoryInterface
func (_mock *MockLocationRepositoryInterface) List(ctx context.Context) ([]models.Location, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.Location
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]models.Location, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []models.Location); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Location)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLocationRepositoryInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockLocationRepositoryInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLocationRepositoryInterface_Expecter) List(ctx interface{}) *MockLocationRepositoryInterface_List_Call {
	return &MockLocationRepositoryInterface_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockLocationRepositoryInterface_List_Call) Run(run func(ctx context.Context)) *MockLocationRepositoryInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLocationRepositoryInterface_List_Call) Return(locations []models.Location, err error) *MockLocationRepositoryInterface_List_Call {
	_c.Call.Return(locations, err)
	return _c
}

func (_c *MockLocationRepositoryInterface_List_Call) RunAndReturn(run func(ctx context.Context) ([]models.Location, error)) *MockLocationRepositoryInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

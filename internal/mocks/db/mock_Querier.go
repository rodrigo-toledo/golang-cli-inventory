// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package db

import (
	"cli-inventory/internal/db"
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	mock "github.com/stretchr/testify/mock"
)

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// AddStock provides a mock function for the type MockQuerier
func (_mock *MockQuerier) AddStock(ctx context.Context, arg db.AddStockParams) (db.Stock, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddStock")
	}

	var r0 db.Stock
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.AddStockParams) (db.Stock, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.AddStockParams) db.Stock); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Stock)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.AddStockParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_AddStock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddStock'
type MockQuerier_AddStock_Call struct {
	*mock.Call
}

// AddStock is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.AddStockParams
func (_e *MockQuerier_Expecter) AddStock(ctx interface{}, arg interface{}) *MockQuerier_AddStock_Call {
	return &MockQuerier_AddStock_Call{Call: _e.mock.On("AddStock", ctx, arg)}
}

func (_c *MockQuerier_AddStock_Call) Run(run func(ctx context.Context, arg db.AddStockParams)) *MockQuerier_AddStock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.AddStockParams
		if args[1] != nil {
			arg1 = args[1].(db.AddStockParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_AddStock_Call) Return(stock db.Stock, err error) *MockQuerier_AddStock_Call {
	_c.Call.Return(stock, err)
	return _c
}

func (_c *MockQuerier_AddStock_Call) RunAndReturn(run func(ctx context.Context, arg db.AddStockParams) (db.Stock, error)) *MockQuerier_AddStock_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLocation provides a mock function for the type MockQuerier
func (_mock *MockQuerier) CreateLocation(ctx context.Context, name string) (db.Location, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateLocation")
	}

	var r0 db.Location
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (db.Location, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) db.Location); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(db.Location)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_CreateLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLocation'
type MockQuerier_CreateLocation_Call struct {
	*mock.Call
}

// CreateLocation is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockQuerier_Expecter) CreateLocation(ctx interface{}, name interface{}) *MockQuerier_CreateLocation_Call {
	return &MockQuerier_CreateLocation_Call{Call: _e.mock.On("CreateLocation", ctx, name)}
}

func (_c *MockQuerier_CreateLocation_Call) Run(run func(ctx context.Context, name string)) *MockQuerier_CreateLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_CreateLocation_Call) Return(location db.Location, err error) *MockQuerier_CreateLocation_Call {
	_c.Call.Return(location, err)
	return _c
}

func (_c *MockQuerier_CreateLocation_Call) RunAndReturn(run func(ctx context.Context, name string) (db.Location, error)) *MockQuerier_CreateLocation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProduct provides a mock function for the type MockQuerier
func (_mock *MockQuerier) CreateProduct(ctx context.Context, arg db.CreateProductParams) (db.Product, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 db.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateProductParams) (db.Product, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateProductParams) db.Product); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Product)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.CreateProductParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type MockQuerier_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateProductParams
func (_e *MockQuerier_Expecter) CreateProduct(ctx interface{}, arg interface{}) *MockQuerier_CreateProduct_Call {
	return &MockQuerier_CreateProduct_Call{Call: _e.mock.On("CreateProduct", ctx, arg)}
}

func (_c *MockQuerier_CreateProduct_Call) Run(run func(ctx context.Context, arg db.CreateProductParams)) *MockQuerier_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.CreateProductParams
		if args[1] != nil {
			arg1 = args[1].(db.CreateProductParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_CreateProduct_Call) Return(product db.Product, err error) *MockQuerier_CreateProduct_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockQuerier_CreateProduct_Call) RunAndReturn(run func(ctx context.Context, arg db.CreateProductParams) (db.Product, error)) *MockQuerier_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStock provides a mock function for the type MockQuerier
func (_mock *MockQuerier) CreateStock(ctx context.Context, arg db.CreateStockParams) (db.Stock, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateStock")
	}

	var r0 db.Stock
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateStockParams) (db.Stock, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateStockParams) db.Stock); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Stock)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.CreateStockParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_CreateStock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStock'
type MockQuerier_CreateStock_Call struct {
	*mock.Call
}

// CreateStock is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateStockParams
func (_e *MockQuerier_Expecter) CreateStock(ctx interface{}, arg interface{}) *MockQuerier_CreateStock_Call {
	return &MockQuerier_CreateStock_Call{Call: _e.mock.On("CreateStock", ctx, arg)}
}

func (_c *MockQuerier_CreateStock_Call) Run(run func(ctx context.Context, arg db.CreateStockParams)) *MockQuerier_CreateStock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.CreateStockParams
		if args[1] != nil {
			arg1 = args[1].(db.CreateStockParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_CreateStock_Call) Return(stock db.Stock, err error) *MockQuerier_CreateStock_Call {
	_c.Call.Return(stock, err)
	return _c
}

func (_c *MockQuerier_CreateStock_Call) RunAndReturn(run func(ctx context.Context, arg db.CreateStockParams) (db.Stock, error)) *MockQuerier_CreateStock_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStockMovement provides a mock function for the type MockQuerier
func (_mock *MockQuerier) CreateStockMovement(ctx context.Context, arg db.CreateStockMovementParams) (db.StockMovement, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateStockMovement")
	}

	var r0 db.StockMovement
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateStockMovementParams) (db.StockMovement, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.CreateStockMovementParams) db.StockMovement); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.StockMovement)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.CreateStockMovementParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_CreateStockMovement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStockMovement'
type MockQuerier_CreateStockMovement_Call struct {
	*mock.Call
}

// CreateStockMovement is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateStockMovementParams
func (_e *MockQuerier_Expecter) CreateStockMovement(ctx interface{}, arg interface{}) *MockQuerier_CreateStockMovement_Call {
	return &MockQuerier_CreateStockMovement_Call{Call: _e.mock.On("CreateStockMovement", ctx, arg)}
}

func (_c *MockQuerier_CreateStockMovement_Call) Run(run func(ctx context.Context, arg db.CreateStockMovementParams)) *MockQuerier_CreateStockMovement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.CreateStockMovementParams
		if args[1] != nil {
			arg1 = args[1].(db.CreateStockMovementParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_CreateStockMovement_Call) Return(stockMovement db.StockMovement, err error) *MockQuerier_CreateStockMovement_Call {
	_c.Call.Return(stockMovement, err)
	return _c
}

func (_c *MockQuerier_CreateStockMovement_Call) RunAndReturn(run func(ctx context.Context, arg db.CreateStockMovementParams) (db.StockMovement, error)) *MockQuerier_CreateStockMovement_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLocation provides a mock function for the type MockQuerier
func (_mock *MockQuerier) DeleteLocation(ctx context.Context, id int32) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLocation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_DeleteLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLocation'
type MockQuerier_DeleteLocation_Call struct {
	*mock.Call
}

// DeleteLocation is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockQuerier_Expecter) DeleteLocation(ctx interface{}, id interface{}) *MockQuerier_DeleteLocation_Call {
	return &MockQuerier_DeleteLocation_Call{Call: _e.mock.On("DeleteLocation", ctx, id)}
}

func (_c *MockQuerier_DeleteLocation_Call) Run(run func(ctx context.Context, id int32)) *MockQuerier_DeleteLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int32
		if args[1] != nil {
			arg1 = args[1].(int32)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_DeleteLocation_Call) Return(err error) *MockQuerier_DeleteLocation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_DeleteLocation_Call) RunAndReturn(run func(ctx context.Context, id int32) error) *MockQuerier_DeleteLocation_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProduct provides a mock function for the type MockQuerier
func (_mock *MockQuerier) DeleteProduct(ctx context.Context, id int32) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_DeleteProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProduct'
type MockQuerier_DeleteProduct_Call struct {
	*mock.Call
}

// DeleteProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockQuerier_Expecter) DeleteProduct(ctx interface{}, id interface{}) *MockQuerier_DeleteProduct_Call {
	return &MockQuerier_DeleteProduct_Call{Call: _e.mock.On("DeleteProduct", ctx, id)}
}

func (_c *MockQuerier_DeleteProduct_Call) Run(run func(ctx context.Context, id int32)) *MockQuerier_DeleteProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int32
		if args[1] != nil {
			arg1 = args[1].(int32)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_DeleteProduct_Call) Return(err error) *MockQuerier_DeleteProduct_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_DeleteProduct_Call) RunAndReturn(run func(ctx context.Context, id int32) error) *MockQuerier_DeleteProduct_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStock provides a mock function for the type MockQuerier
func (_mock *MockQuerier) DeleteStock(ctx context.Context, arg db.DeleteStockParams) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStock")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.DeleteStockParams) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_DeleteStock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStock'
type MockQuerier_DeleteStock_Call struct {
	*mock.Call
}

// DeleteStock is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.DeleteStockParams
func (_e *MockQuerier_Expecter) DeleteStock(ctx interface{}, arg interface{}) *MockQuerier_DeleteStock_Call {
	return &MockQuerier_DeleteStock_Call{Call: _e.mock.On("DeleteStock", ctx, arg)}
}

func (_c *MockQuerier_DeleteStock_Call) Run(run func(ctx context.Context, arg db.DeleteStockParams)) *MockQuerier_DeleteStock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.DeleteStockParams
		if args[1] != nil {
			arg1 = args[1].(db.DeleteStockParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_DeleteStock_Call) Return(err error) *MockQuerier_DeleteStock_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_DeleteStock_Call) RunAndReturn(run func(ctx context.Context, arg db.DeleteStockParams) error) *MockQuerier_DeleteStock_Call {
	_c.Call.Return(run)
	return _c
}

// GetLocationByID provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetLocationByID(ctx context.Context, id int32) (db.Location, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetLocationByID")
	}

	var r0 db.Location
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) (db.Location, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) db.Location); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Location)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetLocationByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocationByID'
type MockQuerier_GetLocationByID_Call struct {
	*mock.Call
}

// GetLocationByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockQuerier_Expecter) GetLocationByID(ctx interface{}, id interface{}) *MockQuerier_GetLocationByID_Call {
	return &MockQuerier_GetLocationByID_Call{Call: _e.mock.On("GetLocationByID", ctx, id)}
}

func (_c *MockQuerier_GetLocationByID_Call) Run(run func(ctx context.Context, id int32)) *MockQuerier_GetLocationByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int32
		if args[1] != nil {
			arg1 = args[1].(int32)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_GetLocationByID_Call) Return(location db.Location, err error) *MockQuerier_GetLocationByID_Call {
	_c.Call.Return(location, err)
	return _c
}

func (_c *MockQuerier_GetLocationByID_Call) RunAndReturn(run func(ctx context.Context, id int32) (db.Location, error)) *MockQuerier_GetLocationByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLocationByName provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetLocationByName(ctx context.Context, name string) (db.Location, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetLocationByName")
	}

	var r0 db.Location
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (db.Location, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) db.Location); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(db.Location)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetLocationByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocationByName'
type MockQuerier_GetLocationByName_Call struct {
	*mock.Call
}

// GetLocationByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockQuerier_Expecter) GetLocationByName(ctx interface{}, name interface{}) *MockQuerier_GetLocationByName_Call {
	return &MockQuerier_GetLocationByName_Call{Call: _e.mock.On("GetLocationByName", ctx, name)}
}

func (_c *MockQuerier_GetLocationByName_Call) Run(run func(ctx context.Context, name string)) *MockQuerier_GetLocationByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_GetLocationByName_Call) Return(location db.Location, err error) *MockQuerier_GetLocationByName_Call {
	_c.Call.Return(location, err)
	return _c
}

func (_c *MockQuerier_GetLocationByName_Call) RunAndReturn(run func(ctx context.Context, name string) (db.Location, error)) *MockQuerier_GetLocationByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetLowStock provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetLowStock(ctx context.Context, quantity int32) ([]db.Stock, error) {
	ret := _mock.Called(ctx, quantity)

	if len(ret) == 0 {
		panic("no return value specified for GetLowStock")
	}

	var r0 []db.Stock
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) ([]db.Stock, error)); ok {
		return returnFunc(ctx, quantity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) []db.Stock); ok {
		r0 = returnFunc(ctx, quantity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Stock)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, quantity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetLowStock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLowStock'
type MockQuerier_GetLowStock_Call struct {
	*mock.Call
}

// GetLowStock is a helper method to define mock.On call
//   - ctx context.Context
//   - quantity int32
func (_e *MockQuerier_Expecter) GetLowStock(ctx interface{}, quantity interface{}) *MockQuerier_GetLowStock_Call {
	return &MockQuerier_GetLowStock_Call{Call: _e.mock.On("GetLowStock", ctx, quantity)}
}

func (_c *MockQuerier_GetLowStock_Call) Run(run func(ctx context.Context, quantity int32)) *MockQuerier_GetLowStock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int32
		if args[1] != nil {
			arg1 = args[1].(int32)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_GetLowStock_Call) Return(stocks []db.Stock, err error) *MockQuerier_GetLowStock_Call {
	_c.Call.Return(stocks, err)
	return _c
}

func (_c *MockQuerier_GetLowStock_Call) RunAndReturn(run func(ctx context.Context, quantity int32) ([]db.Stock, error)) *MockQuerier_GetLowStock_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductByID provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetProductByID(ctx context.Context, id int32) (db.Product, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 db.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) (db.Product, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) db.Product); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Product)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetProductByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductByID'
type MockQuerier_GetProductByID_Call struct {
	*mock.Call
}

// GetProductByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *MockQuerier_Expecter) GetProductByID(ctx interface{}, id interface{}) *MockQuerier_GetProductByID_Call {
	return &MockQuerier_GetProductByID_Call{Call: _e.mock.On("GetProductByID", ctx, id)}
}

func (_c *MockQuerier_GetProductByID_Call) Run(run func(ctx context.Context, id int32)) *MockQuerier_GetProductByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int32
		if args[1] != nil {
			arg1 = args[1].(int32)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_GetProductByID_Call) Return(product db.Product, err error) *MockQuerier_GetProductByID_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockQuerier_GetProductByID_Call) RunAndReturn(run func(ctx context.Context, id int32) (db.Product, error)) *MockQuerier_GetProductByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductBySKU provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetProductBySKU(ctx context.Context, sku string) (db.Product, error) {
	ret := _mock.Called(ctx, sku)

	if len(ret) == 0 {
		panic("no return value specified for GetProductBySKU")
	}

	var r0 db.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (db.Product, error)); ok {
		return returnFunc(ctx, sku)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) db.Product); ok {
		r0 = returnFunc(ctx, sku)
	} else {
		r0 = ret.Get(0).(db.Product)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, sku)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetProductBySKU_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductBySKU'
type MockQuerier_GetProductBySKU_Call struct {
	*mock.Call
}

// GetProductBySKU is a helper method to define mock.On call
//   - ctx context.Context
//   - sku string
func (_e *MockQuerier_Expecter) GetProductBySKU(ctx interface{}, sku interface{}) *MockQuerier_GetProductBySKU_Call {
	return &MockQuerier_GetProductBySKU_Call{Call: _e.mock.On("GetProductBySKU", ctx, sku)}
}

func (_c *MockQuerier_GetProductBySKU_Call) Run(run func(ctx context.Context, sku string)) *MockQuerier_GetProductBySKU_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_GetProductBySKU_Call) Return(product db.Product, err error) *MockQuerier_GetProductBySKU_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockQuerier_GetProductBySKU_Call) RunAndReturn(run func(ctx context.Context, sku string) (db.Product, error)) *MockQuerier_GetProductBySKU_Call {
	_c.Call.Return(run)
	return _c
}

// GetStockByLocation provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetStockByLocation(ctx context.Context, locationID int32) ([]db.Stock, error) {
	ret := _mock.Called(ctx, locationID)

	if len(ret) == 0 {
		panic("no return value specified for GetStockByLocation")
	}

	var r0 []db.Stock
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) ([]db.Stock, error)); ok {
		return returnFunc(ctx, locationID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) []db.Stock); ok {
		r0 = returnFunc(ctx, locationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Stock)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, locationID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetStockByLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStockByLocation'
type MockQuerier_GetStockByLocation_Call struct {
	*mock.Call
}

// GetStockByLocation is a helper method to define mock.On call
//   - ctx context.Context
//   - locationID int32
func (_e *MockQuerier_Expecter) GetStockByLocation(ctx interface{}, locationID interface{}) *MockQuerier_GetStockByLocation_Call {
	return &MockQuerier_GetStockByLocation_Call{Call: _e.mock.On("GetStockByLocation", ctx, locationID)}
}

func (_c *MockQuerier_GetStockByLocation_Call) Run(run func(ctx context.Context, locationID int32)) *MockQuerier_GetStockByLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int32
		if args[1] != nil {
			arg1 = args[1].(int32)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_GetStockByLocation_Call) Return(stocks []db.Stock, err error) *MockQuerier_GetStockByLocation_Call {
	_c.Call.Return(stocks, err)
	return _c
}

func (_c *MockQuerier_GetStockByLocation_Call) RunAndReturn(run func(ctx context.Context, locationID int32) ([]db.Stock, error)) *MockQuerier_GetStockByLocation_Call {
	_c.Call.Return(run)
	return _c
}

// GetStockByProduct provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetStockByProduct(ctx context.Context, productID int32) ([]db.Stock, error) {
	ret := _mock.Called(ctx, productID)

	if len(ret) == 0 {
		panic("no return value specified for GetStockByProduct")
	}

	var r0 []db.Stock
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) ([]db.Stock, error)); ok {
		return returnFunc(ctx, productID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) []db.Stock); ok {
		r0 = returnFunc(ctx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Stock)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetStockByProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStockByProduct'
type MockQuerier_GetStockByProduct_Call struct {
	*mock.Call
}

// GetStockByProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - productID int32
func (_e *MockQuerier_Expecter) GetStockByProduct(ctx interface{}, productID interface{}) *MockQuerier_GetStockByProduct_Call {
	return &MockQuerier_GetStockByProduct_Call{Call: _e.mock.On("GetStockByProduct", ctx, productID)}
}

func (_c *MockQuerier_GetStockByProduct_Call) Run(run func(ctx context.Context, productID int32)) *MockQuerier_GetStockByProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int32
		if args[1] != nil {
			arg1 = args[1].(int32)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_GetStockByProduct_Call) Return(stocks []db.Stock, err error) *MockQuerier_GetStockByProduct_Call {
	_c.Call.Return(stocks, err)
	return _c
}

func (_c *MockQuerier_GetStockByProduct_Call) RunAndReturn(run func(ctx context.Context, productID int32) ([]db.Stock, error)) *MockQuerier_GetStockByProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetStockByProductAndLocation provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetStockByProductAndLocation(ctx context.Context, arg db.GetStockByProductAndLocationParams) (db.Stock, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for GetStockByProductAndLocation")
	}

	var r0 db.Stock
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.GetStockByProductAndLocationParams) (db.Stock, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.GetStockByProductAndLocationParams) db.Stock); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Stock)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.GetStockByProductAndLocationParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetStockByProductAndLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStockByProductAndLocation'
type MockQuerier_GetStockByProductAndLocation_Call struct {
	*mock.Call
}

// GetStockByProductAndLocation is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.GetStockByProductAndLocationParams
func (_e *MockQuerier_Expecter) GetStockByProductAndLocation(ctx interface{}, arg interface{}) *MockQuerier_GetStockByProductAndLocation_Call {
	return &MockQuerier_GetStockByProductAndLocation_Call{Call: _e.mock.On("GetStockByProductAndLocation", ctx, arg)}
}

func (_c *MockQuerier_GetStockByProductAndLocation_Call) Run(run func(ctx context.Context, arg db.GetStockByProductAndLocationParams)) *MockQuerier_GetStockByProductAndLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.GetStockByProductAndLocationParams
		if args[1] != nil {
			arg1 = args[1].(db.GetStockByProductAndLocationParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_GetStockByProductAndLocation_Call) Return(stock db.Stock, err error) *MockQuerier_GetStockByProductAndLocation_Call {
	_c.Call.Return(stock, err)
	return _c
}

func (_c *MockQuerier_GetStockByProductAndLocation_Call) RunAndReturn(run func(ctx context.Context, arg db.GetStockByProductAndLocationParams) (db.Stock, error)) *MockQuerier_GetStockByProductAndLocation_Call {
	_c.Call.Return(run)
	return _c
}

// GetStockMovementsByLocation provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetStockMovementsByLocation(ctx context.Context, fromLocationID pgtype.Int4) ([]db.StockMovement, error) {
	ret := _mock.Called(ctx, fromLocationID)

	if len(ret) == 0 {
		panic("no return value specified for GetStockMovementsByLocation")
	}

	var r0 []db.StockMovement
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pgtype.Int4) ([]db.StockMovement, error)); ok {
		return returnFunc(ctx, fromLocationID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pgtype.Int4) []db.StockMovement); ok {
		r0 = returnFunc(ctx, fromLocationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.StockMovement)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pgtype.Int4) error); ok {
		r1 = returnFunc(ctx, fromLocationID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetStockMovementsByLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStockMovementsByLocation'
type MockQuerier_GetStockMovementsByLocation_Call struct {
	*mock.Call
}

// GetStockMovementsByLocation is a helper method to define mock.On call
//   - ctx context.Context
//   - fromLocationID pgtype.Int4
func (_e *MockQuerier_Expecter) GetStockMovementsByLocation(ctx interface{}, fromLocationID interface{}) *MockQuerier_GetStockMovementsByLocation_Call {
	return &MockQuerier_GetStockMovementsByLocation_Call{Call: _e.mock.On("GetStockMovementsByLocation", ctx, fromLocationID)}
}

func (_c *MockQuerier_GetStockMovementsByLocation_Call) Run(run func(ctx context.Context, fromLocationID pgtype.Int4)) *MockQuerier_GetStockMovementsByLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pgtype.Int4
		if args[1] != nil {
			arg1 = args[1].(pgtype.Int4)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_GetStockMovementsByLocation_Call) Return(stockMovements []db.StockMovement, err error) *MockQuerier_GetStockMovementsByLocation_Call {
	_c.Call.Return(stockMovements, err)
	return _c
}

func (_c *MockQuerier_GetStockMovementsByLocation_Call) RunAndReturn(run func(ctx context.Context, fromLocationID pgtype.Int4) ([]db.StockMovement, error)) *MockQuerier_GetStockMovementsByLocation_Call {
	_c.Call.Return(run)
	return _c
}

// GetStockMovementsByProduct provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetStockMovementsByProduct(ctx context.Context, productID int32) ([]db.StockMovement, error) {
	ret := _mock.Called(ctx, productID)

	if len(ret) == 0 {
		panic("no return value specified for GetStockMovementsByProduct")
	}

	var r0 []db.StockMovement
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) ([]db.StockMovement, error)); ok {
		return returnFunc(ctx, productID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) []db.StockMovement); ok {
		r0 = returnFunc(ctx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.StockMovement)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetStockMovementsByProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStockMovementsByProduct'
type MockQuerier_GetStockMovementsByProduct_Call struct {
	*mock.Call
}

// GetStockMovementsByProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - productID int32
func (_e *MockQuerier_Expecter) GetStockMovementsByProduct(ctx interface{}, productID interface{}) *MockQuerier_GetStockMovementsByProduct_Call {
	return &MockQuerier_GetStockMovementsByProduct_Call{Call: _e.mock.On("GetStockMovementsByProduct", ctx, productID)}
}

func (_c *MockQuerier_GetStockMovementsByProduct_Call) Run(run func(ctx context.Context, productID int32)) *MockQuerier_GetStockMovementsByProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int32
		if args[1] != nil {
			arg1 = args[1].(int32)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_GetStockMovementsByProduct_Call) Return(stockMovements []db.StockMovement, err error) *MockQuerier_GetStockMovementsByProduct_Call {
	_c.Call.Return(stockMovements, err)
	return _c
}

func (_c *MockQuerier_GetStockMovementsByProduct_Call) RunAndReturn(run func(ctx context.Context, productID int32) ([]db.StockMovement, error)) *MockQuerier_GetStockMovementsByProduct_Call {
	_c.Call.Return(run)
	return _c
}

// ListLocations provides a mock function for the type MockQuerier
func (_mock *MockQuerier) ListLocations(ctx context.Context) ([]db.Location, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListLocations")
	}

	var r0 []db.Location
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]db.Location, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []db.Location); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Location)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_ListLocations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLocations'
type MockQuerier_ListLocations_Call struct {
	*mock.Call
}

// ListLocations is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) ListLocations(ctx interface{}) *MockQuerier_ListLocations_Call {
	return &MockQuerier_ListLocations_Call{Call: _e.mock.On("ListLocations", ctx)}
}

func (_c *MockQuerier_ListLocations_Call) Run(run func(ctx context.Context)) *MockQuerier_ListLocations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQuerier_ListLocations_Call) Return(locations []db.Location, err error) *MockQuerier_ListLocations_Call {
	_c.Call.Return(locations, err)
	return _c
}

func (_c *MockQuerier_ListLocations_Call) RunAndReturn(run func(ctx context.Context) ([]db.Location, error)) *MockQuerier_ListLocations_Call {
	_c.Call.Return(run)
	return _c
}

// ListProducts provides a mock function for the type MockQuerier
func (_mock *MockQuerier) ListProducts(ctx context.Context) ([]db.Product, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListProducts")
	}

	var r0 []db.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]db.Product, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []db.Product); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_ListProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProducts'
type MockQuerier_ListProducts_Call struct {
	*mock.Call
}

// ListProducts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) ListProducts(ctx interface{}) *MockQuerier_ListProducts_Call {
	return &MockQuerier_ListProducts_Call{Call: _e.mock.On("ListProducts", ctx)}
}

func (_c *MockQuerier_ListProducts_Call) Run(run func(ctx context.Context)) *MockQuerier_ListProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQuerier_ListProducts_Call) Return(products []db.Product, err error) *MockQuerier_ListProducts_Call {
	_c.Call.Return(products, err)
	return _c
}

func (_c *MockQuerier_ListProducts_Call) RunAndReturn(run func(ctx context.Context) ([]db.Product, error)) *MockQuerier_ListProducts_Call {
	_c.Call.Return(run)
	return _c
}

// ListStockMovements provides a mock function for the type MockQuerier
func (_mock *MockQuerier) ListStockMovements(ctx context.Context) ([]db.StockMovement, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListStockMovements")
	}

	var r0 []db.StockMovement
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]db.StockMovement, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []db.StockMovement); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.StockMovement)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_ListStockMovements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStockMovements'
type MockQuerier_ListStockMovements_Call struct {
	*mock.Call
}

// ListStockMovements is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuerier_Expecter) ListStockMovements(ctx interface{}) *MockQuerier_ListStockMovements_Call {
	return &MockQuerier_ListStockMovements_Call{Call: _e.mock.On("ListStockMovements", ctx)}
}

func (_c *MockQuerier_ListStockMovements_Call) Run(run func(ctx context.Context)) *MockQuerier_ListStockMovements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockQuerier_ListStockMovements_Call) Return(stockMovements []db.StockMovement, err error) *MockQuerier_ListStockMovements_Call {
	_c.Call.Return(stockMovements, err)
	return _c
}

func (_c *MockQuerier_ListStockMovements_Call) RunAndReturn(run func(ctx context.Context) ([]db.StockMovement, error)) *MockQuerier_ListStockMovements_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveStock provides a mock function for the type MockQuerier
func (_mock *MockQuerier) RemoveStock(ctx context.Context, arg db.RemoveStockParams) (db.Stock, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for RemoveStock")
	}

	var r0 db.Stock
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.RemoveStockParams) (db.Stock, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.RemoveStockParams) db.Stock); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Stock)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.RemoveStockParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_RemoveStock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveStock'
type MockQuerier_RemoveStock_Call struct {
	*mock.Call
}

// RemoveStock is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.RemoveStockParams
func (_e *MockQuerier_Expecter) RemoveStock(ctx interface{}, arg interface{}) *MockQuerier_RemoveStock_Call {
	return &MockQuerier_RemoveStock_Call{Call: _e.mock.On("RemoveStock", ctx, arg)}
}

func (_c *MockQuerier_RemoveStock_Call) Run(run func(ctx context.Context, arg db.RemoveStockParams)) *MockQuerier_RemoveStock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.RemoveStockParams
		if args[1] != nil {
			arg1 = args[1].(db.RemoveStockParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_RemoveStock_Call) Return(stock db.Stock, err error) *MockQuerier_RemoveStock_Call {
	_c.Call.Return(stock, err)
	return _c
}

func (_c *MockQuerier_RemoveStock_Call) RunAndReturn(run func(ctx context.Context, arg db.RemoveStockParams) (db.Stock, error)) *MockQuerier_RemoveStock_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLocation provides a mock function for the type MockQuerier
func (_mock *MockQuerier) UpdateLocation(ctx context.Context, arg db.UpdateLocationParams) (db.Location, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLocation")
	}

	var r0 db.Location
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateLocationParams) (db.Location, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateLocationParams) db.Location); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Location)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.UpdateLocationParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_UpdateLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLocation'
type MockQuerier_UpdateLocation_Call struct {
	*mock.Call
}

// UpdateLocation is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateLocationParams
func (_e *MockQuerier_Expecter) UpdateLocation(ctx interface{}, arg interface{}) *MockQuerier_UpdateLocation_Call {
	return &MockQuerier_UpdateLocation_Call{Call: _e.mock.On("UpdateLocation", ctx, arg)}
}

func (_c *MockQuerier_UpdateLocation_Call) Run(run func(ctx context.Context, arg db.UpdateLocationParams)) *MockQuerier_UpdateLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.UpdateLocationParams
		if args[1] != nil {
			arg1 = args[1].(db.UpdateLocationParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_UpdateLocation_Call) Return(location db.Location, err error) *MockQuerier_UpdateLocation_Call {
	_c.Call.Return(location, err)
	return _c
}

func (_c *MockQuerier_UpdateLocation_Call) RunAndReturn(run func(ctx context.Context, arg db.UpdateLocationParams) (db.Location, error)) *MockQuerier_UpdateLocation_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProduct provides a mock function for the type MockQuerier
func (_mock *MockQuerier) UpdateProduct(ctx context.Context, arg db.UpdateProductParams) (db.Product, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 db.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateProductParams) (db.Product, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateProductParams) db.Product); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Product)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.UpdateProductParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_UpdateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProduct'
type MockQuerier_UpdateProduct_Call struct {
	*mock.Call
}

// UpdateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateProductParams
func (_e *MockQuerier_Expecter) UpdateProduct(ctx interface{}, arg interface{}) *MockQuerier_UpdateProduct_Call {
	return &MockQuerier_UpdateProduct_Call{Call: _e.mock.On("UpdateProduct", ctx, arg)}
}

func (_c *MockQuerier_UpdateProduct_Call) Run(run func(ctx context.Context, arg db.UpdateProductParams)) *MockQuerier_UpdateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.UpdateProductParams
		if args[1] != nil {
			arg1 = args[1].(db.UpdateProductParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_UpdateProduct_Call) Return(product db.Product, err error) *MockQuerier_UpdateProduct_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockQuerier_UpdateProduct_Call) RunAndReturn(run func(ctx context.Context, arg db.UpdateProductParams) (db.Product, error)) *MockQuerier_UpdateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStock provides a mock function for the type MockQuerier
func (_mock *MockQuerier) UpdateStock(ctx context.Context, arg db.UpdateStockParams) (db.Stock, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStock")
	}

	var r0 db.Stock
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateStockParams) (db.Stock, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, db.UpdateStockParams) db.Stock); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Stock)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, db.UpdateStockParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_UpdateStock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStock'
type MockQuerier_UpdateStock_Call struct {
	*mock.Call
}

// UpdateStock is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateStockParams
func (_e *MockQuerier_Expecter) UpdateStock(ctx interface{}, arg interface{}) *MockQuerier_UpdateStock_Call {
	return &MockQuerier_UpdateStock_Call{Call: _e.mock.On("UpdateStock", ctx, arg)}
}

func (_c *MockQuerier_UpdateStock_Call) Run(run func(ctx context.Context, arg db.UpdateStockParams)) *MockQuerier_UpdateStock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 db.UpdateStockParams
		if args[1] != nil {
			arg1 = args[1].(db.UpdateStockParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockQuerier_UpdateStock_Call) Return(stock db.Stock, err error) *MockQuerier_UpdateStock_Call {
	_c.Call.Return(stock, err)
	return _c
}

func (_c *MockQuerier_UpdateStock_Call) RunAndReturn(run func(ctx context.Context, arg db.UpdateStockParams) (db.Stock, error)) *MockQuerier_UpdateStock_Call {
	_c.Call.Return(run)
	return _c
}
